---
title: "BIOL 5404 Assignment 2"
author: "Roz Dakin"
date: "February 2, 2024"
published-title: "Due on"
format: html
editor: visual
toc: true
toc-location: left
toc-expand: 2
toc-title: BIOL 5404 A2
link-external-newwindow: true
---

[Back to assignment list](index.html)

## Instructions

-   Create a new .R script to complete this assignment in your local assignments folder for this course.
-   You'll submit the .R script on Brightspace.
-   ***Put your FIRST and LAST NAME in the [file name]{.underline} of the script.***
-   Put your name at the top of the script as well.
-   Please do not include your student ID, just your name is enough.
-   **Show your work!**
-   Make sure your script is organized and legible.
-   Use [code sections](https://support.posit.co/hc/en-us/articles/200484568-Code-Folding-and-Sections-in-the-RStudio-IDE) (####) & question numbers as outlined below.
-   Provide all written answers as brief \# comments within your script.
-   Be sure to load all packages needed at the top of your script, like this (adding any other packages needed):

```{r}
#| label: packages
#| message: false

library(tidyverse)
```

We will use the diamonds dataset that comes with the tidyverse package. We will also use the iris dataset that comes with base R.

## Part 1

In R, the sd() function takes a vector of numeric data and returns the sample standard deviation.

```{r}
#| label: sd-demo

x <- 1:10
sd(x)
```

1a. Write your OWN function that takes a vector of numeric data, and returns the sample standard deviation (you'll need to know the formula for SD to do this).

Use the formula for the ***Sample*** ***SD*** here:

[![](standard-deviation_formula.png){width="589"}](https://www.k2analytics.co.in/wp-content/uploads/2020/05/standard-deviation.png)

Note: do not use sd() in your function! The purpose of this exercise is to generate a function yourself that will do this.

1b. Verify that your function gives the same output as sd() for a few examples. What happens if you pass your function a vector of character data? What happens if you pass your function a vector that is a factor?

1c. Now, modify your function so that IF it gets passed a vector that is not numeric, THEN it prints a useful error message. Start by copy-pasting your function above, then modify it to add this new capacity. After creating your new-and-improved function, show that it works with a few examples.

Hint: you can use a conditional statement to do this, along with the function is.numeric(), which is shown below.

```{r}
#| label: is-numeric-demo

is.numeric(1:10)
is.numeric(c('a', 'b', 'c'))
```

1d. What happens if you pass your function a numeric vector that has one NA value in it?

**OPTIONAL:** Modify your function further (building a new version) so that if it gets passed a numeric vector with at least one NA entry, it still reports the sample SD for the non-NA values. How many non-NA datapoints (values) does your function need, at a minimum, to be able to report the SD? Caution: ensure that your function calculates the sample sd of non-NA values using the correct n of non-NA values.

## Part 2

2a. Building on the function you created above, write a new function (with a new name) that takes a vector of values as input, and calculates and returns 3 descriptive statistics:

-   the sample mean,
-   the sample SD,
-   and the standard error of the mean.

It should return a vector of those three values.

2b. To maximize the usefulness of this new function, modify it so that the 3 values in the vector that gets returned are each named. Here is a hint/reminder for how to create a vector of numeric values where each element has a name:

```{r}
#| label: naming-example

c('mean' = 1, 'sd' = 2, 'sem' = 3)
```

## Part 3

3a. Write a for loop that prints the values from 50:80

3b. The iris dataset has measurements of flower morphology for 3 iris species:

```{r}
#| label: iris-data

str(iris)
```

The first 4 columns are numeric measurements of length and width of flower structures. Write a for loop that:

-   Generates a histogram for each of those 4 columns in turn.
-   Each histogram should have a title on top of the histogram with the name of the column (Petal.Width, etc).
    -   Hint: you can do this with hist() using the main argument in base R
    -   Other hint: column names for a data.frame are accessible via names()
-   And lastly, your loop should wait for a keypress before moving on to the next column and generating the next histogram.
    -   Hint: one way to pause to wait for a keypress in the console is to use the readline() function:

```{r}
#| label: wait-keypress
#| eval: false

readline(prompt = 'Press return/enter to continue')
```

## Part 4

4a. Use apply() to get the median value for each of the first 4 columns of the **iris** dataset.

4b. Create an 8 x 8 matrix (give it a name) with the values from 1:64, where the values are filled in row-wise (i.e., the first row should be 1:8, second should be 9:16, third should be 17:24, etc)

4c. Use apply() to get the sample **sd** of each **column** in your matrix.

4d. Use apply() to get the sample **sd** of each **row** in your matrix. Are you surprised by the values?

## Part 5

For this question, we'll use the diamonds dataset. It is a large dataset with data on the characteristics from \~54,000 diamonds, including each diamond's weight in carats; it's "cut", color, and clarity classifications; it's price; and it's dimensions (mm) in 3 axes (and a few others variables).

```{r}
#| label: diamonds-example

diamonds
```

[![Diamond in kimberlite matrix from South Africa (source: Wikimedia Commons).](Diamond_-_South_Africa_-_Finsch_Mine_2.jpg){fig-align="left" width="678"}](https://commons.wikimedia.org/wiki/File:Diamond_-_South_Africa_-_Finsch_Mine_2.jpg)

Remember, you can use this to see the meta-data:

```{r}
#| label: diamonds-meta
#| eval: false

help(diamonds)
```

5a. What are the possible values of **cut**? Take a look at them, and examine the distribution of cut (i.e., the number of diamonds in the dataset in each cut category).

5b. Suppose we want to model the relationship between **price** and **weight (carat)** for each cut separately (in a separate model). As a first step, create a scatterplot for price vs. carat weight for JUST the subset of **Premium** diamonds from the dataset. You can use ggplot2 if you wish, or just use plot() in base R.

5c. Now, regenerate the scatterplot, but this time plot natural log-transformed price vs. natural log-transformed carat weight, for just the **Premium** diamonds. How does the relationship change when examining the log-log transformation?

5d. Create an object mod that is a fitted regression model for **log-price** vs. **log-carat weight** for just the **Premium** diamonds. Examine the summary() for your model. What % of variation in the log-price of premium diamonds is explained by log-weight? (This is the multiple R-squared.)

5e. Show that you can extract the value of this R-squared from the fitted model.

Hint: summary(mod) is itself a **list** object that contains the value you are looking for. You can use str() on the output of summary(mod) to index (i.e., pull out) the R-squared value.

**OPTIONAL:** Write a custom function that takes a fitted model object, and returns the R-squared value from its summary.

## Extra optional challenges

This is for extra (excellent) practice, and is not graded.

i.  Use a for loop to fit a separate model of log-price vs. log-weight for EACH of the levels of cut in the diamonds dataset (Ideal, Premium, Good etc), and store the fitted model in a list.

    To get you started, the example below creates an empty list called fitted_mods with a length that matches the number of unique levels of cut (5). Write your for loop so that it iterates over each level of cut, fitting the log-log regression model (as you did above), and then storing the fitted model in the appropriate slot of fitted_mods. When your loop is done, fitted_mods should contain one fitted model for each unique cut type.

    ```{r}
    #| label: example-fitted_modes

    mycuts <- unique(diamonds$cut)

    fitted_mods <- vector("list", length = length(mycuts))
    ```

ii. Using sapply() and your function for extracting R-squared values, get the five R-squared values from your fitted_mods list.

iii. Looking at the meta-data for diamonds, we see that the column **depth** is a measure of diamond shape that is calculated from a diamond's linear x, y, and z dimensions. The help file gives two separate formulas for depth, as follows:

     z / mean(x, y)

     2 \* z / (x + y)

     ...and somewhat confusingly, after the formulas, it also gives the range of depth values in the dataset, reported as (43-79). We can confirm this with:

     ```{r}
     #| label: check-depth-range

     summary(diamonds$depth)
     ```

iv. Create a new column in diamonds, **depthF2**, that calculates depth following the **second formula** above.

v.  Create a new column in diamonds, **depthF1**, that calculates depth following the **first formula** above.

vi. Plot a scatterplot of **depthF1** vs. **depthF2**. Add a red line that shows a 1:1 relationship. Note that there are many ways to do this, and one is abline(). Does the result look as you would expect?

vii. Looking at the range of your newly calculated values, it's clear that the depth column in diamonds is scaled by some factor. Can you figure out what that factor is, using the data?

viii. Re-scale your newly-calculated columns **depthF2** and **depthF1** so that they are expected to match **depth**. Then plot depth vs. one of your new columns. Add the red 1:1 line again.

ix. It's clear from the plot that the dataset has some discrepancies. Either we have errors in the x, y, or z measurements, OR we have errors in the depth values that were calculated by the authors of the diamonds dataset (or both). Investigating this, which do you think is more likely?

x.  Let's create a marker to identify the problematic rows. Generate a new column in diamonds called **meas_ok** that has a value of T IF the measurements are OK, and a value of F if there is a large discrepancy that we would want to investigate futher.

    As the definition of a "large enough" discrepancy for this example, let's say if your calculated **depthF1** is within +/- 5 of the value in **depth** column of the dataset, we'll consider that row to be OK.

    IF **depthF1** and **depth** have a discrepancy that is larger than +/- 5, or if **depthF1** is missing or NA, consider it to be a problematic row.

xi. How many of the diamonds are problematic? What percent of the original data is this? Create a filtered data.frame with just the problematic rows, so they can be inspected.
